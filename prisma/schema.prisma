generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model BannerSlide {
  id          String        @id @default(uuid())
  title       String
  subtitle    String
  modelId     String?       @map("model_id")
  mainImageId String?       @map("main_image_id")
  bgImageId   String?       @map("bg_image_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  model       Model?        @relation(fields: [modelId], references: [id])
  mainImage   BannerImage?  @relation("MainImage", fields: [mainImageId], references: [id])
  bgImage     BannerImage?  @relation("BackgroundImage", fields: [bgImageId], references: [id])

  @@map("banner_slides")
}

model Car {
  id                String          @id @default(uuid())
  name              String
  price             Decimal         @db.Decimal(10, 2)
  scale             String
  description       String          @db.Text
  tag               String?
  colorId           String          @map("color_id")
  brandId           String          @map("brand_id")
  modelId           String          @map("model_id")
  statusId          String?         @map("status_id")
  thumbnailImageId  String?         @map("thumbnail_image_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  
  // Relations
  color           Color          @relation(fields: [colorId], references: [id])
  brand           Brand          @relation(fields: [brandId], references: [id])
  model           Model          @relation(fields: [modelId], references: [id])
  status          Status?         @relation(fields: [statusId], references: [id])
  thumbnailImage  ThumbnailImage? @relation(fields: [thumbnailImageId], references: [id])
  variantImages   VariantImage[] 

  @@map("cars")
}

model Color {
  id        String   @id @default(uuid())
  order     Int?
  name      String   @unique
  rgb       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]

  @@map("colors")
}

model Brand {
  id        String   @id @default(uuid())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]

  @@map("brands")
}

model Status {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]

  @@map("statuses")
}

model Model {
  id        String   @id @default(uuid())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]
  bannerSlides BannerSlide[]

  @@map("models")
}

model ThumbnailImage {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cars      Car[]

  @@map("thumbnail_images")
}

model VariantImage {
  id        String   @id @default(uuid())
  url       String
  carId     String   @map("car_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  car       Car      @relation(fields: [carId], references: [id])

  @@map("variant_images")
}

model BannerImage {
  id                     String        @id @default(uuid())
  url                    String
  type                   BannerImageType
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime      @updatedAt @map("updated_at")
  
  // Relations - one image can be used as main image for multiple slides
  mainImageForSlides     BannerSlide[] @relation("MainImage")
  
  // Relations - one image can be used as background image for multiple slides
  bgImageForSlides       BannerSlide[] @relation("BackgroundImage")

  @@map("banner_images")
}

enum Role {
  USER
  ADMIN
}

enum BannerImageType {
  MAIN
  BACKGROUND
}